// Generated by CoffeeScript 1.10.0

/*
 * jQuery Crawler for TorBrowser (Firefox) Console v0.0.1
 *   https://github.com/fracmode/jquery-crawler-for-torbrowser
 * 
 * Date: 2015-10-16
 */

(function() {
  'use strict';

  /*
   * 1. copy and paste this line to TorBrowser JavaScript Console
   */
  document.body.appendChild(function(){src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js";sc = document.createElement("script");sc.type="text/javascript";sc.src=src;sc.onload = function() {/*window.jQuery.noConflict();*/};return sc;}());

  /*
   * 2. paste these line to Console to get URL List
   *    *** URL is dummy and not working for now ***
   *
   * TODO:
   *   - crawling action should be rewritten using $.deferred
   */
  (function() {
    var __setTimeout, callbackSuccess, findLinks, params;
    window.jQTB = {
      result: null
    };
    params = {
      baseurl: 'http://image.search.yahoo.co.jp/search?p=%E7%8C%AB&ei=UTF-8&save=0',
      el: {
        link: '#gridlist .tb a',
        next: '#Sp1.mod .m a'
      },
      limit: 10,
      callbackModUrl: function(url) {
        url = url.substr(url.indexOf('**') + 2);
        return decodeURIComponent(url);
      }
    };
    console.log('params', params);
    __setTimeout = function(time, callback) {
      if (time == null) {
        time = 1000;
      }
      return setTimeout(callback, time);
    };
    findLinks = function($el_target) {
      var $el_links;
      $el_links = $el_target.find(params.el.link);
      if ($el_links.length <= 0) {
        return;
      }
      $el_links.each(function() {
        window.jQTB.result.push($(this).attr('href'));
      });
    };
    callbackSuccess = function($el_target, count) {
      var $el_next, _url;
      console.log('count', count, 'limit', params.limit);
      if (count >= params.limit) {
        console.log("crawling count is reached the limit. (" + params.limit + ")");
        return;
      }
      $el_next = $el_target.find(params.el.next);
      if ($el_next.length <= 0) {
        console.log("next link is not found. (element name: " + params.el.next + ")");
        return;
      }
      findLinks($el_target);
      _url = $el_next.attr('href');
      if (typeof params.callbackModUrl === 'function') {
        _url = params.callbackModUrl(_url);
      }
      return __setTimeout(1000, function() {
        $.ajax({
          type: 'GET',
          url: _url,
          xhrFields: {
            withCredentials: true
          },
          success: function(response) {
            callbackSuccess($(response), ++count);
          },
          error: function() {
            console.log('error', _url);
          }
        });
      });
    };
    window.jQTB.result = [];
    return $(document).ready(function() {
      return (function() {
        return $.ajax({
          type: 'GET',
          url: params.baseurl,
          xhrFields: {
            withCredentials: true
          },
          success: function(response) {
            return callbackSuccess($(response), 1);
          },
          error: function() {
            return console.log('error', params.baseurl);
          }
        });
      })();
    });
  })();

}).call(this);
